import dependency_injector.providers as providers
import dependency_injector.containers as containers

{% if flavour.plugin_system %}
from importlib.metadata import entry_points
from {{ name.package }}.default.plugin import DefaultPlugin
{% endif %}

from {{ name.package }}.app import {{ name.class }}
import logging.config

logging_conf = {
    "version": 1,
    "formatters": {
        "simple": {
            "format": '%(levelname)-8s at %(pathname)s:%(lineno)d %(message)s'
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "stream": "ext://sys.stdout",
        }
    },
    "loggers": {
        "{{ name.class }}": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": "no"
        }
    },
    "root": {
        "level": "DEBUG",
        "handlers": ["console"]
    }
}

logging.config.dictConfig(logging_conf)


DEFAULT_CONFIG = {
    "appname": "{{ name.project }}"
}


class Config(containers.DeclarativeContainer):

    config = providers.Configuration("config")
    config.override(DEFAULT_CONFIG)


class Utils(containers.DeclarativeContainer):
    print = providers.Callable(print)

{% if flavour.plugin %}
class Plugin(containers.DeclarativeContainer):
    plugin = providers.Factory({{ name.class }}Plugin,
                              plugin_name={{ name.package }},
                              print=Utils.print,
                              logger=providers.Callable(
                                logging.getLogger,
                                {{ name.class }}.__name__)
                              )
{% endif %}

class App(containers.DeclarativeContainer):

    app = providers.Factory({{ name.class }},
                            appname=Config.config.appname, 
                            print=Utils.print,
                            logger=providers.Callable(
                                logging.getLogger,
                                {{ name.class }}.__name__
                            )
                            {% if flavour.plugin_system %},plugins=Plugins.discovered_plugins{% endif %})